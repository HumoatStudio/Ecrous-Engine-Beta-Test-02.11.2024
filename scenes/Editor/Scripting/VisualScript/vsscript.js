let x = 0; // Initialize x with a default value
let score = 0; // Variable to hold the score
const outputElement = document.getElementById('output');

// Function to allow dropping of blocks
function allowDrop(event) {
    event.preventDefault();
}

// Function to initiate drag of blocks
function drag(event) {
    event.dataTransfer.setData("text/plain", event.target.dataset.code);
}

// Function to drop the dragged block into the workspace
function drop(event) {
    event.preventDefault();
    const code = event.dataTransfer.getData("text/plain");
    createCodeBlock(code);
}

// Function to create a new code block in the workspace
function createCodeBlock(code) {
    const workspace = document.getElementById('workspace');
    const codeBlock = document.createElement('div');
    codeBlock.className = 'code-block';
    codeBlock.innerHTML = `
        <span class="code-text">${code}</span> 
        <button class="edit-button" onclick="editBlock(this.parentNode)">üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="delete-button" onclick="deleteBlock(this.parentNode)">üóë –£–¥–∞–ª–∏—Ç—å</button>
    `;
    workspace.appendChild(codeBlock);
}

// Function to execute the code represented by the blocks
document.getElementById('runButton').addEventListener('click', function() {
    outputElement.textContent = ''; // Clear previous output
    const codeBlocks = document.querySelectorAll('.code-block .code-text');
    codeBlocks.forEach(block => {
        executeCode(block.textContent);
    });
});

// Function to delete a code block
function deleteBlock(codeBlock) {
    codeBlock.remove();
}

// Function to edit a code block
function editBlock(codeBlock) {
    const currentCode = codeBlock.querySelector('.code-text').textContent;
    const newCode = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥:', currentCode);
    if (newCode) {
        codeBlock.querySelector('.code-text').textContent = newCode;
    }
}

// Function to output messages to the output area
function output(message) {
    outputElement.textContent += message + '\n';
}

// Function to execute the code with various commands
function executeCode(code) {
    try {
        if (code.startsWith("output('")) {
            const message = code.slice(8, -2);
            output(message);
        } else if (code.startsWith("–í—ã–≤–µ—Å—Ç–∏ x")) {
            output(`x: ${x !== undefined ? x : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
        } else if (code.startsWith("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å x –Ω–∞")) {
            x = parseInt(code.split('–Ω–∞ ')[1]); // Set x to the specified value
        } else if (code.startsWith("–ï—Å–ª–∏ x > 0")) {
            if (x > 0) {
                output('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ');
            }
        } else if (code.startsWith("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")) {
            const times = parseInt(code.split(' ')[1]);
            for (let i = 0; i < times; i++) {
                output('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å');
            }
        } else if (code.startsWith("–ü–æ–¥–æ–∂–¥–∞—Ç—å")) {
            output('–ü–æ–¥–æ–∂–¥–∞—Ç—å 1 —Å–µ–∫—É–Ω–¥—É');
        } else if (code.startsWith("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –Ω–∞")) {
            const color = code.split('–Ω–∞ ')[1];
            output(`–¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${color}`);
        } else if (code.startsWith("–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞")) {
            const size = parseInt(code.split('–Ω–∞ ')[1]);
            output(`–†–∞–∑–º–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${size}`);
        } else if (code.startsWith("–î–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞")) {
            const steps = parseInt(code.split('–Ω–∞ ')[1]);
            output(`–î–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ ${steps} —à–∞–≥–æ–≤`);
        } else if (code.startsWith("–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞")) {
            const degrees = parseInt(code.split('–Ω–∞ ')[1]);
            output(`–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ ${degrees} –≥—Ä–∞–¥—É—Å–æ–≤`);
        } else if (code.startsWith("–ï—Å–ª–∏ –∫–∞—Å–∞—é—Å—å –∫—Ä–∞—è")) {
            output('–ö–∞—Å–∞—é—Å—å –∫—Ä–∞—è, –æ—Ç—Å–∫–æ–∫!');
        } else if (code.startsWith("–°–ø—Ä–æ—Å–∏—Ç—å –∏–º—è")) {
            const name = prompt('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
            output(`–ò–º—è: ${name}`);
        } else if (code.startsWith("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –Ω–∞")) {
            score = 0; // Reset score
            output('–°—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 0');
        } else if (code.startsWith("–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç –Ω–∞ 1")) {
            score += 1; // Increase score
            output(`–°—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}`);
        } else if (code.startsWith("–°–±—Ä–æ—Å–∏—Ç—å")) {
            score = 0; // Reset score
            output('–°—á–µ—Ç —Å–±—Ä–æ—à–µ–Ω');
        }
    } catch (error) {
        output(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    }
}
